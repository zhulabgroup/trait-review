library(aws.s3)
bucket_exists(
bucket = "s3://herbariumnsw-pds/",
region = "ap-southeast-2"
)
library(tidyverse)
bucket_name <- "phenoobservers"
bucket_region <- "us-east-2"
files_s3 <- aws.s3::get_bucket_df(bucket = bucket_name, region = bucket_region, prefix = "PhenoForecast", max = 10) %>%
filter(!str_detect(Key, "/$")) %>%
pull(Key)
files_s3
files_s3 <- aws.s3::get_bucket_df(bucket = bucket_name, region = bucket_region, prefix = "PhenoForecast", max = 10) %>%
filter(!str_detect(Key, "/$")) %>%
pull(Key)
files_s3
?bucket_name
?bucket_name %>% put_bucket()
?put_bucket()
aws.s3::s3write_using(iris, FUN = readr::write_csv, object = "test.csv",
bucket=bucket_name %>% put_bucket(region = bucket_region))
aws.s3::put_object(file = "textnet.ipynb",
# object= "test.csv",
bucket = bucket_name,
region = bucket_region)
bucket_name %>% put_bucket(region = bucket_region)
aws.s3::s3write_using(iris, FUN = readr::write_csv, object = "test.csv",
bucket=bucket_name )
bucket_name %>% put_bucket(region = bucket_region)
files_s3
csv_data<-aws.s3::s3read_using(readr::read_csv, object = files_s3[2],
bucket=bucket_name)
?put_bucket
?aws.s3::s3write_using
write_csv(iris, "test.csv")
aws.s3::put_object(file = "test.csv",
object= "test.csv",
bucket = bucket_name,
region = bucket_region)
aws.s3::s3write_using(iris, FUN = readr::write_csv, object = "test.csv",
bucket=bucket_name)
aws.s3::s3write_using
?put_object
aws.s3::get_object(object= "test.csv",
bucket = bucket_name)
aws.s3::get_object(object= "test.csv",
bucket = bucket_name)
iris
aws.s3::put_object(file = "test.csv",
object= "test.csv",
bucket = bucket_name)
aws.s3::put_object(file = "test.csv",
object= "test.csv",
bucket = bucket_name,
region = bucket_region)
aws.s3::get_object(object= "test.csv",
bucket = bucket_name,
region = bucket_region)
?get_object
b<-get_bucket(bucket = bucket_name,
region = bucket_region)
b
b[[1]]
b[[50]]
b<-get_bucket(bucket = bucket_name,
region = bucket_region,
prefix = "")
b
b<-get_bucket_df(bucket = bucket_name,
region = bucket_region,
prefix = "")
b
aws.s3::s3write_using(iris, FUN = readr::write_csv, object = "test.csv",
bucket=bucket_name %>% put_bucket(region = bucket_region))
?s3write_using
aws.s3::s3write_using(iris, FUN = readr::write_csv, object = "test.csv",
bucket=bucket_name , opts = list(region = bucket_region))
csv_data<-aws.s3::s3read_using(readr::read_csv, object =  "test.csv",
bucket=bucket_name,
opts = list(region = bucket_region))
csv_data
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
ls_df_para <- get_keyphrase_paragraph()
library(traitlitreview)
ls_df_para <- get_keyphrase_paragraph()
# ls_df_para <- get_keyphrase_paragraph()
get_keyphrase_paragraph <- function(df_bib_phrase = NULL, df_phrase_stem = NULL, df_phrase_label = NULL, indir = "inst/extdata/keywords/", outdir = "inst/extdata/keywords/") {
if (is.null(df_bib_phrase)) {
df_bib_phrase <- read_csv(str_c(indir, "df_bib_phrase.csv"))
}
if (is.null(df_phrase_stem)) {
df_phrase_stem <- read_csv(str_c(indir, "df_phrase_stem.csv"))
}
if (is.null(df_phrase_label)) {
df_phrase_label <- read_csv(str_c(indir, "df_phrase_label_YS.csv"))
}
df_phrase_label <- df_phrase_label %>%
mutate(valid = replace_na(valid, 1)) %>%
filter(valid == 1) %>%
mutate(
trait = replace_na(trait, 0),
globalchange = replace_na(globalchange, 0)
)
df_bib_phrase_sub <- df_bib_phrase %>%
right_join(df_phrase_stem %>% select(-keyphrase_n), by = "keyphrase") %>%
right_join(df_phrase_label %>% select(-count), by = "keyphrase_stem")
df_net_area_trait <- df_bib_phrase_sub %>%
filter(trait == 1) %>%
select(group = code, phrase = keyphrase_eg) %>%
group_by(group, phrase) %>%
summarise(count = n()) %>%
ungroup()
write_csv(df_net_area_trait, str_c(outdir, "df_net_area_trait.csv"))
df_net_trait_all <- df_bib_phrase_sub %>%
filter(trait != 1) %>%
select(id, code, phrase = keyphrase_eg) %>%
group_by(id, code, phrase) %>%
summarise(count = n()) %>%
ungroup() %>%
spread(key = "phrase", value = "count", fill = 0) %>%
inner_join(
df_bib_phrase_sub %>%
filter(trait == 1) %>%
distinct(id, code, group = keyphrase_eg),
by = c("id", "code")
) %>%
gather(key = "phrase", value = "count", -id, -code, -group) %>%
select(-id, -code) %>%
group_by(group, phrase) %>%
summarise(count = sum(count)) %>%
ungroup() %>%
filter(count > 0)
write_csv(df_net_trait_all, str_c(outdir, "df_net_trait_all.csv"))
df_net_trait_gc <- df_bib_phrase_sub %>%
filter(globalchange == 1) %>%
select(id, code, phrase = keyphrase_eg) %>%
group_by(id, code, phrase) %>%
summarise(count = n()) %>%
ungroup() %>%
spread(key = "phrase", value = "count", fill = 0) %>%
inner_join(
df_bib_phrase_sub %>%
filter(trait == 1) %>%
distinct(id, code, group = keyphrase_eg),
by = c("id", "code")
) %>%
gather(key = "phrase", value = "count", -id, -code, -group) %>%
select(-id, -code) %>%
group_by(group, phrase) %>%
summarise(count = sum(count)) %>%
ungroup() %>%
filter(count > 0)
write_csv(df_net_trait_gc, str_c(outdir, "df_net_trait_gc.csv"))
out <- list(
area_trait = df_net_area_trait,
trait_all = df_net_trait_all,
trait_gc = df_net_trait_gc
)
return(out)
}
ls_df_para <- get_keyphrase_paragraph()
df_net_area_trait
library(readr)
df_net_trait_gc <- read_csv("inst/extdata/keywords/df_net_trait_gc.csv")
View(df_net_trait_gc)
plot_text_network(df_net_trait_gc)
library(readr)
df_net_area_trait <- read_csv("inst/extdata/keywords/df_net_area_trait.csv")
View(df_net_area_trait)
plot_text_network(df_net_area_trait)
ls_df_para
ls_df_para %>% str()
install.packages("rscopus")
library(rscopus)
test_query <- "SUBJTERMS (3005)
AND
TITLE-ABS-KEY ( ( "functional"  OR  "biological"  OR  "morphological"  OR  "demographic"  OR  "response"  OR  "effect"  OR  "health"  OR  "physiological"  OR  "phenotypic"  OR  "species"  OR  "phenological"  OR  "host"  OR  "behavioral"  OR  "root"  OR  "life-history"  OR  "metabolic"  OR  "reproductive"  OR  "biogeographic"  OR  "mobility"  OR  "chemical"  OR  "leaf"  OR  "physical"  OR  "indicator"  OR  "growth"  OR  "eco-physiological"  OR  "personality" )  AND  ( trait )  OR  ( "trait-based"  OR  "functional group"  OR  "functional guild"  OR  "functional morphology" )  AND  ( "climat* change"  OR  "global change"  OR  "climat* warming"  OR  "global warming"  OR  "climat* crisis"  OR  "climat* emergency"  OR  "elevated temperature"  OR  "weather anomal*"  OR  "temperature anomal*"  OR  "extreme climat*"  OR  "extreme weather"  OR  "anthropogenic impact"  OR  "nitrogen fertilization"  OR  "nitrogen addition"  OR  "nitrogen deposition"  OR  "nitrogen application"  OR  "eutrophication"  OR  "free-air carbon dioxide enrichment"  OR  "free-air CO2 enrichment"  OR  "elevated CO2"  OR  "elevated atmospheric CO2"  OR  "eCO2"  OR  "changing precipitation"  OR  "increased precipitation"  OR  "decreased precipitation"  OR  "increased rainfall"  OR  "decreased rainfall"  OR  "changing rainfall"  OR  "increased snowfall"  OR  "decreased snowfall"  OR  "changing snowfall"  OR  "precipitation anomal*"  OR  "rainfall anomal*"  OR  "drought"  OR  "land use"  OR  "land-use"  OR  "landuse"  OR  "land abandon*"  OR  "habitat loss"  OR  "fragmentation"  OR  "matrix effect"  OR  "edge effect"  OR  "deforest*"  OR  "logg*"  OR  "forest fragment*"  OR  "agricultur* expansion"  OR  "farming"  OR  "plantation"  OR  "crop* expansion"  OR  "human-dominated landscapes" )  OR  "*fire"  OR  "burn"  OR  "invasion"  OR  "non-native"  OR  "nonnative"  OR  "non-indigenous"  OR  ( "alien"  OR  "exotic"  OR  "naturali*"  OR  "introduced"  AND  "species" )  OR  ( "invasive"  AND  "species"  OR  "predator"  OR  "population" )  OR  ( "chemical"  OR  "microplastic*"  OR  "micro plastic*"  OR  "plastic"  OR  "nitrogen"  OR  "air"  OR  "industrial"  OR  "water"  OR  "oil"  OR  "heavy metal"  AND  "pollution" )  OR  "plastic debris"  OR  "microbeads"  OR  "microfiber"  OR  "acid rain"  OR  "pesticide contamination"  OR  "waste disposal" OR urban* OR city OR cities OR "urban habitat*")
library(rscopus)
auth = elsevier_authenticate()
subject_areas()
subject_area_codes()
?subject_areas()
plot_text_network(ls_df_para$area_trait)
plot_text_network(ls_df_para$trait_all)
plot_text_network(ls_df_para$trait_gc)
plot_text_network(ls_df_para$trait_all)
ls_df_para$trait_all
ls_df_para$trait_all %>% hist(count)
ls_df_para$trait_all %>% pull(count) %>% hist()
ls_df_para$trait_all %>% pull(count) %>% min()
plot_text_network(ls_df_para$trait_all %>% filter(count >=5))
plot_text_network(ls_df_para$trait_all %>% filter(count >=20))
plot_text_network(ls_df_para$trait_all %>% filter(count >=50))
plot_text_network(ls_df_para$trait_all %>% filter(count >=100))
